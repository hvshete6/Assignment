{"version":3,"sources":["logo.svg","redux/bgRedux/bg.actionTypes.js","redux/bgRedux/bgReducer.js","ChangeButton.js","redux/bgRedux/bg.actions.js","App.js","redux/rootReducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["PURE_BLACK_BG","WHITE_BG","PURE_BLACK_TRANSPARENT","DARK_GREY","GREY","LIGHT_GREY","initialState","color","ChangeButton","dispatch","useDispatch","viewBg","useSelector","state","className","style","backgroundColor","JSON","stringify","Button","variant","type","size","padding","marginBottom","onClick","payload","useStyles","makeStyles","theme","minus","background","borderRadius","border","maxWidth","maxHeight","minWidth","minHeight","fontSize","plus","empty","App","classes","useState","title","setTitle","useEffect","fetch","then","response","json","data","blogs","console","log","catch","varient","fontWeight","id","htmlFor","map","rootReducer","combineReducers","bgStore","action","store","createStore","composeWithDevTools","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b208e9b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const PURE_BLACK_BG = 'PURE_BLACK_BG';\r\nexport const WHITE_BG = 'WHITE_BG';\r\nexport const PURE_BLACK_TRANSPARENT = 'PURE_BLACK_TRANSPARENT';\r\nexport const DARK_GREY = 'DARK_GREY';\r\nexport const GREY = 'GREY';\r\nexport const LIGHT_GREY = 'LIGHT_GREY';","import { PURE_BLACK_BG, WHITE_BG, PURE_BLACK_TRANSPARENT, DARK_GREY, GREY, LIGHT_GREY } from \"./bg.actionTypes\";\r\n\r\nexport const BG_KEY = \"bgStore\";\r\n\r\nlet initialState = {\r\n  color: \"#fff\",\r\n};\r\n\r\nlet bgReducer = (state = initialState, action) => {\r\n  let { type, payload } = action;\r\n  switch (type) {\r\n    case PURE_BLACK_BG:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n\r\n    case WHITE_BG:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n    case PURE_BLACK_TRANSPARENT:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n    case DARK_GREY:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n    case DARK_GREY:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n    case GREY:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n    case LIGHT_GREY:\r\n      return {\r\n        color: \"#\" + payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport {bgReducer}","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BG_KEY } from \"./redux/bgRedux/bgReducer\";\r\nimport {\r\n  pureBlackBg,\r\n  whiteBg,\r\n  pureBlackTransparent,\r\n  darkGrey,\r\n  grey,\r\n  lightGrey,\r\n} from \"./redux/bgRedux/bg.actions\";\r\n\r\nconst ChangeButton = () => {\r\n  let dispatch = useDispatch();\r\n\r\n  let clickPureBlack = () => {\r\n    dispatch(pureBlackBg());\r\n  };\r\n\r\n  let clickWhite = () => {\r\n    dispatch(whiteBg());\r\n  };\r\n  let clickBlackTransparent = () => {\r\n    dispatch(pureBlackTransparent());\r\n  };\r\n  let clickDarkGrey = () => {\r\n    dispatch(darkGrey());\r\n  };\r\n  let clickGrey = () => {\r\n    dispatch(grey());\r\n  };\r\n  let clickLightGrey = () => {\r\n    dispatch(lightGrey());\r\n  };\r\n\r\n  let viewBg = useSelector((state) => {\r\n    return state[BG_KEY];\r\n  });\r\n  return (\r\n    <div className=\"changeButtonComp\" style={{ backgroundColor: viewBg.color }}>\r\n      <pre>{JSON.stringify(viewBg)}</pre>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#000000\",\r\n          color: \"#F3F2FC\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n        }}\r\n        onClick={clickPureBlack}\r\n      >\r\n        Pure Black\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#FFFFF\",\r\n          color: \"#000000\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n\r\n        }}\r\n        onClick={clickWhite}\r\n      >\r\n        White\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#808080\",\r\n          color: \"#000000\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n\r\n        }}\r\n        onClick={clickBlackTransparent}\r\n      >\r\n        Black 50% Transparent\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#D8D8D8\",\r\n          color: \"#000000\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n\r\n        }}\r\n        onClick={clickDarkGrey}\r\n      >\r\n        Dark Grey\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#F0F0F0\",\r\n          color: \"#000000\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n\r\n        }}\r\n        onClick={clickGrey}\r\n      >\r\n        Grey\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"checkbox\"\r\n        size=\"large\"\r\n        style={{\r\n          backgroundColor: \"#F6F6F6\",\r\n          color: \"#000000\",\r\n          padding: \"10px 50px\",\r\n          marginBottom:'10px'\r\n\r\n        }}\r\n        onClick={clickLightGrey}\r\n      >\r\n        Light Grey\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeButton;\r\n","import { PURE_BLACK_BG, WHITE_BG, PURE_BLACK_TRANSPARENT, DARK_GREY, GREY, LIGHT_GREY } from \"./bg.actionTypes\";\r\n\r\nlet pureBlackBg = () => {\r\n  return {\r\n    type: PURE_BLACK_BG,\r\n    payload: \"000000\",\r\n  };\r\n};\r\nlet whiteBg = () => {\r\n  return {\r\n    type: WHITE_BG,\r\n    payload: \"fff\",\r\n  };\r\n};\r\nlet pureBlackTransparent = () => {\r\n  return {\r\n    type: PURE_BLACK_TRANSPARENT,\r\n    payload: \"808080\",\r\n  };\r\n};\r\nlet darkGrey = () => {\r\n  return {\r\n    type: DARK_GREY,\r\n    payload: \"D8D8D8\",\r\n  };\r\n};\r\nlet grey = () => {\r\n  return {\r\n    type: GREY,\r\n    payload: \"F0F0F0\",\r\n  };\r\n};\r\nlet lightGrey = () => {\r\n  return {\r\n    type: LIGHT_GREY,\r\n    payload: \"FFFF00\",\r\n  };\r\n};\r\n\r\nexport { pureBlackBg, whiteBg, pureBlackTransparent, darkGrey, grey, lightGrey};\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport ChangeButton from \"./ChangeButton\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { BG_KEY } from \"./redux/bgRedux/bgReducer\";\n\nconst useStyles = makeStyles((theme) => ({\n  minus: {\n    background: \"#F3F2FC\",\n    borderRadius: 3,\n    border: \"2px solid #D64B4B\",\n    color: \"#D64B4B\",\n    maxWidth: \"30px\",\n    maxHeight: \"30px\",\n    minWidth: \"30px\",\n    minHeight: \"30px\",\n    fontSize: \"22px\",\n    borderRadius: \"7px\",\n  },\n  plus: {\n    borderRadius: 3,\n    border: \"2px solid #5E4FDB\",\n    color: \"#5E4FDB\",\n    maxWidth: \"30px\",\n    maxHeight: \"30px\",\n    minWidth: \"30px\",\n    minHeight: \"30px\",\n    fontSize: \"22px\",\n    borderRadius: \"7px\",\n  },\n  empty: {\n    borderRadius: 3,\n    border: \"2px solid #F3F2FC\",\n    color: \"#5E4FDB\",\n    maxWidth: \"30px\",\n    maxHeight: \"30px\",\n    minWidth: \"30px\",\n    minHeight: \"30px\",\n    fontSize: \"22px\",\n    borderRadius: \"7px\",\n  },\n}));\n\n// function ButtonStyled() {\n//   const classes = useStyles();\n//   return <Button className={classes.root}>-</Button>;\n// }\n\nfunction App() {\n  const classes = useStyles();\n  const [title, setTitle] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://logibricks.com/api/blogs/logistics-management\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setTitle(data?.blogs?.data);\n        console.log(data);\n      })\n      .catch();\n  }, []);\n\n  let viewBg = useSelector((state) => {\n    return state[BG_KEY];\n  });\n\n  return (\n    <div style={{ backgroundColor: viewBg.color }}>\n    <div className=\"container\" >\n      {/* ////////////////////////////////////// TOP Section ////////////////////////// */}\n\n      <div className=\"buttons\">\n        <Button\n          varient=\"container\"\n          type=\"checkbox\"\n          size=\"large\"\n          style={{\n            backgroundColor: \"#5E4FDB\",\n            color: \"#F3F2FC\",\n            padding: \"10px 50px\",\n          }}\n        >\n          Button\n        </Button>\n      </div>\n\n      <div className=\"buttons\">\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          style={{\n            border: \"2px solid #5E4FDB\",\n            padding: \"10px 50px\",\n            fontWeight: \"bold\",\n            color: \"#5E4FDB\",\n            fontWeight: \"bold\",\n          }}\n        >\n          Button\n        </Button>\n      </div>\n\n      <div className=\"buttons\">\n        <Button\n          color=\"primary\"\n          style={{\n            padding: \"10px 50px\",\n            fontWeight: \"bold\",\n            color: \"#5E4FDB\",\n            fontWeight: \"bold\",\n          }}\n        >\n          Button\n        </Button>\n      </div>\n\n      <div className=\"operators\">\n        <div className=\"buttons2\">\n          <Button className={classes.minus}>-</Button>\n        </div>\n        <div className=\"buttons2\">\n          <Button className={classes.plus}>+</Button>\n        </div>\n        <div className=\"buttons2\">\n          <Button className={classes.empty}></Button>\n        </div>\n      </div>\n\n      <div className=\"operators2\">\n        <div className=\"buttons2\">\n          <Button\n            className={classes.minus}\n            style={{ background: \"#D64B4B\", color: \"#F3F2FC\", border: \"none\" }}\n          >\n            -\n          </Button>\n        </div>\n        <div className=\"buttons2\">\n          <Button\n            className={classes.plus}\n            style={{ background: \"#5E4FDB\", color: \"#F3F2FC\", border: \"none\" }}\n          >\n            +\n          </Button>\n        </div>\n        <div className=\"buttons2\">\n          <Button\n            className={classes.minus}\n            style={{ background: \"#1ABC9C\", color: \"#F3F2FC\", border: \"none\" }}\n          >\n            ✓\n          </Button>\n        </div>\n      </div>\n\n      {/* ////////////////////////////////////// Bottom Section ////////////////////////// */}\n\n      <div className=\"lastSection\" style={{ backgroundColor: viewBg.color }}>\n        <div className=\"toggleBox\">\n          <div className=\"toggle\">\n            <input type=\"checkbox\" className=\"red\" id=\"one\" />\n            <label htmlFor=\"\" className=\"no\">\n              No\n            </label>\n          </div>\n        </div>\n        <div className=\"toggleBox\">\n          <div className=\"toggle\">\n            <input type=\"checkbox\" className=\"green\" id=\"two\" />\n            <label htmlFor=\"\" className=\"yes\">\n              Yes\n            </label>\n          </div>\n        </div>\n        <div className=\"toggleBox\">\n          <div className=\"toggle\">\n            <input type=\"checkbox\" className=\"green\" id=\"two\" />\n            <label htmlFor=\"\" className=\"blank\"></label>\n          </div>\n        </div>\n        <div className=\"toggleBox\">\n          <div className=\"toggle\">\n            <input type=\"checkbox\" className=\"grey\" id=\"one\" />\n            <label htmlFor=\"\" className=\"no\"></label>\n          </div>\n        </div>\n      </div>\n\n      {/* ////////////////////////////////////// Change Colour Section ////////////////////////// */}\n      \n        <div className=\"changeButton\">\n          <ChangeButton />\n        </div>\n\n      <div className=\"title\">\n        {title?.map((title) => (\n          <h1 className=\"h1\" key={title.id}>\n            {title.title}\n          </h1>\n        ))}\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {bgReducer} from \"./bgRedux/bgReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nlet rootReducer = combineReducers({\r\n    bgStore: bgReducer,\r\n})\r\n\r\nexport  {rootReducer};","import { rootReducer } from \"./rootReducer\";\r\nimport {createStore} from \"redux\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools())\r\n\r\nexport {store};\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}